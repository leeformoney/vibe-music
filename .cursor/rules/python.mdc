---
description: 
globs: 
alwaysApply: false
---
# Python 开发规范

## 编码风格
- 遵循 PEP 8 风格指南和命名约定
- 使用 4 个空格进行缩进，不使用制表符
- 行长度限制为 88 字符（遵循 Black 格式化工具）
- 使用有意义的变量名和函数名
- 类名使用 PascalCase，函数和变量使用 snake_case

## 类型注解
- 使用类型注解增强代码可读性和类型安全性
- 为函数参数、返回值和复杂变量添加类型注解
- 使用 `typing` 模块提供的类型提示
- 考虑使用 `mypy` 进行静态类型检查

## 依赖管理
- 优先使用虚拟环境管理依赖：
  - 使用 `venv` 或 `poetry` 进行环境隔离
  - 使用 `requirements.txt` 或 `pyproject.toml` 记录依赖
- 固定依赖版本以确保环境一致性
- 分离开发依赖和生产依赖

## 代码组织
- 使用上下文管理器处理资源（如文件操作）
- 优先使用列表推导式、生成器表达式和字典推导式
- 合理使用装饰器简化代码
- 遵循面向对象设计原则（SOLID）

## 异常处理
- 使用异常处理保证程序健壮性
- 捕获具体的异常类型，避免使用裸露的 `except:`
- 在异常处理中提供有意义的错误信息
- 合理使用 `finally` 块进行资源清理

## 数据模型
- 使用 `dataclasses` 或 `pydantic` 模型表示数据
- 为数据类添加类型注解和验证
- 使用属性（property）封装复杂的获取和设置逻辑

## 测试
- 使用 `pytest` 进行测试，保持高测试覆盖率
- 编写单元测试、集成测试和功能测试
- 使用测试夹具（fixture）管理测试数据
- 遵循测试命名约定：`test_[功能描述]`

## 文档
- 使用文档字符串（docstrings）记录函数、类和模块
- 遵循 Google 或 NumPy 文档字符串风格
- 为复杂算法和业务逻辑添加注释
- 保持文档与代码同步

## 性能优化
- 使用性能分析工具识别瓶颈
- 合理使用生成器和迭代器
- 考虑使用 `functools.lru_cache` 进行缓存
- 对于计算密集型任务，考虑使用 `numpy` 或 `numba`

## 项目结构
```
project/
├── src/
│   └── package_name/
│       ├── __init__.py
│       ├── main.py
│       ├── models/
│       ├── services/
│       └── utils/
├── tests/
├── docs/
├── requirements.txt
├── pyproject.toml
└── README.md
```


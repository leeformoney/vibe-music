---
description: 
globs: 
alwaysApply: false
---
# Vue.js 开发规范

## 组件结构
- 优先使用组合式 API（Composition API）而非选项式 API
- 保持组件小巧且专注单一职责
- 正确集成 TypeScript 提高类型安全性
- 实现严格的 props 验证和类型定义
- 使用正确的 emit 声明和类型约束
- 保持模板逻辑简洁，复杂逻辑移至计算属性或方法

## 组合式 API 最佳实践
- 正确区分使用 ref 和 reactive
- 实现适当的生命周期钩子（onMounted、onUpdated等）
- 使用 composables 实现可复用逻辑
- 保持 setup 函数整洁有序
- 合理使用计算属性进行派生状态
- 实现高效的侦听器（watch、watchEffect）

## 状态管理
- 使用 Pinia 进行全局状态管理
- 保持 stores 模块化和职责单一
- 实现清晰的 actions 和 mutations
- 正确使用 getters 进行状态派生
- 适当处理异步状态和错误
- 避免不必要的全局状态

## 性能优化
- 正确使用组件懒加载（defineAsyncComponent）
- 实现适当的缓存策略（keep-alive）
- 合理使用计算属性避免不必要的计算
- 避免过度使用侦听器
- 正确选择 v-show 与 v-if
- 为列表渲染实现稳定的 key 管理

## 路由管理
- 正确配置 Vue Router
- 实现适当的导航守卫（全局、路由、组件级）
- 合理使用路由元字段进行权限控制
- 适当处理路由参数和查询
- 实现路由级别的代码分割
- 使用声明式导航方法

## 表单处理
- 正确使用 v-model 进行双向绑定
- 实现实时表单验证
- 适当处理表单提交和重置
- 显示清晰的加载和错误状态
- 使用表单验证库（如VeeValidate）
- 实现无障碍的表单体验

## TypeScript 集成
- 使用严格的组件类型定义
- 为 props 定义清晰的接口类型
- 使用类型安全的 emit 声明
- 利用 Vue 的类型推断能力
- 为 composables 定义明确的类型
- 实现类型安全的 store 定义

## 测试策略
- 编写全面的单元测试
- 使用 Vue Test Utils 进行组件测试
- 适当测试 composables 和工具函数
- 实现合理的测试模拟（mocks）
- 测试异步操作和错误处理
- 保持高测试覆盖率

## 代码组织和最佳实践
- 遵循 Vue 官方风格指南
- 使用一致的命名约定
- 保持组件目录结构清晰
- 实现统一的错误处理机制
- 使用适当的事件处理模式
- 为复杂逻辑添加注释和文档

## 构建工具和配置
- 使用 Vite 作为构建工具
- 配置合适的开发和生产环境
- 正确使用环境变量
- 实现智能的代码分割
- 优化资源加载和缓存
- 配置适当的构建优化

## 样式管理
- 使用 scoped 样式避免全局污染
- 合理使用 CSS 模块
- 实现响应式设计
- 使用设计令牌和变量
- 保持样式的可维护性
- 考虑使用原子化CSS框架

## 项目结构示例
```
src/
├── components/
│   ├── common/
│   └── pages/
├── composables/
├── stores/
├── router/
├── types/
├── utils/
├── styles/
└── views/
```

## 文件命名约定
- 组件文件使用 PascalCase（MyComponent.vue）
- composables 使用 camelCase 并以 use 开头
- 页面组件放在 views 或 pages 目录
- 工具函数和类型定义使用 camelCase


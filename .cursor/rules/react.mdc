---
description: 
globs: 
alwaysApply: false
---
# React 开发规范

## 组件结构
- 优先使用函数组件而非类组件
- 保持组件小巧且专注单一职责
- 将可复用逻辑提取到自定义 Hook 中
- 使用组合而非继承
- 使用 TypeScript 实现严格的 prop 类型定义
- 将大型组件拆分为更小、更专注的组件

## Hooks 使用规范
- 遵循 Hooks 的使用规则
- 只在React函数顶层调用 Hooks
- 使用自定义 Hooks 实现可复用逻辑
- 保持 Hooks 专注且简单
- 在 useEffect 中使用正确的依赖数组
- 在需要时在 useEffect 中实现清理功能
- 避免嵌套 Hooks

## 状态管理
- 使用 useState 管理组件本地状态
- 使用 useReducer 处理复杂状态逻辑
- 使用 Context API 共享全局状态
- 将状态尽可能靠近使用它的地方
- 通过适当的状态管理避免 prop drilling
- 仅在必要时使用外部状态管理库（Redux、Zustand等）

## 性能优化
- 合理使用记忆化（useMemo、useCallback）
- 对开销大的组件使用 React.memo
- 避免不必要的重新渲染
- 实现适当的代码分割和懒加载
- 在列表中使用稳定且唯一的 key 属性
- 使用虚拟化处理大型列表
- 分析并优化渲染性能

## 表单处理
- 对表单输入使用受控组件
- 实现实时表单验证
- 正确处理表单提交状态
- 显示适当的加载和错误状态
- 对复杂表单使用表单库（React Hook Form、Formik）
- 为表单实现适当的可访问性

## 错误处理
- 实现 Error Boundaries 捕获组件错误
- 正确处理异步操作错误
- 显示用户友好的错误信息
- 实现适当的错误备用 UI
- 适当记录错误信息用于调试
- 优雅处理边缘情况

## 测试策略
- 为组件编写单元测试
- 为复杂用户流程实现集成测试
- 使用 React Testing Library 进行测试
- 测试用户交互而非实现细节
- 测试各种边缘情况和错误场景
- 使用合适的模拟数据和Mock

## 可访问性（A11y）
- 使用语义化 HTML 元素
- 实现适当的 ARIA 属性
- 确保键盘导航功能
- 使用屏幕阅读器测试
- 合理管理焦点状态
- 为图片提供适当的 alt 文本
- 保证足够的颜色对比度

## 代码组织和项目结构
- 将相关组件组织在一起
- 使用一致的文件命名约定
- 实现清晰的目录结构
- 保持样式文件靠近组件
- 使用适当的导入/导出方式
- 为复杂组件添加文档注释

## 样式管理
- 使用CSS模块或styled-components避免样式冲突
- 实现响应式设计
- 使用设计系统和组件库
- 保持样式的一致性
- 合理使用CSS变量
- 避免内联样式

## 数据获取
- 使用适当的数据获取库（React Query、SWR）
- 实现加载状态和错误处理
- 合理使用缓存策略
- 避免在渲染过程中进行数据获取
- 实现适当的数据预加载

## 开发工具和配置
- 使用 ESLint 和 Prettier 保持代码质量
- 配置适当的TypeScript严格模式
- 使用 React Developer Tools 进行调试
- 配置热重载提高开发效率

## 项目结构示例
```
src/
├── components/
│   ├── common/
│   └── pages/
├── hooks/
├── context/
├── utils/
├── types/
├── styles/
├── assets/
└── __tests__/
```

